// Autogenerated from Pigeon (v9.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif



private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol NavigationAPI {
  func navigate() throws -> Int32
  func passData(value: String) throws -> Int32
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class NavigationAPISetup {
  /// The codec used by NavigationAPI.
  /// Sets up an instance of `NavigationAPI` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: NavigationAPI?) {
    let navigateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NavigationAPI.navigate", binaryMessenger: binaryMessenger)
    if let api = api {
      navigateChannel.setMessageHandler { _, reply in
        do {
          let result = try api.navigate()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      navigateChannel.setMessageHandler(nil)
    }
    let passDataChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.NavigationAPI.passData", binaryMessenger: binaryMessenger)
    if let api = api {
      passDataChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let valueArg = args[0] as! String
        do {
          let result = try api.passData(value: valueArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      passDataChannel.setMessageHandler(nil)
    }
  }
}
